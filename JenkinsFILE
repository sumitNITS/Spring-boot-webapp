pipeline {
  agent any 

  stages {

    stage('Build Docker Image') {
      steps {
        script {
            def dockerImage = docker.build("sumit0058/springbootwebapp:v1-${env.BUILD_NUMBER}")
        }
      }
    }

     stage('Build and Test') {
      steps {
        sh 'mvn clean package'
      }
    }
    
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://100.64.188.219:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE_NAME = "sumit0058/springbootwebapp:v1-${env.BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('dockerhub')
      }
      steps {
        script {
            def dockerImage = docker.build(DOCKER_IMAGE_NAME)
            withDockerRegistry(credentialsId: 'dockerhub', url: 'https://index.docker.io/v1/') {
            // docker.withRegistry('https://index.docker.io/v1/', "dockerhub") {
                dockerImage.push()
            }
        }
      }
    }
  }
}
